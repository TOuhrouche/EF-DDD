// <auto-generated />
using System;
using EF_DDD;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EF_DDD.Migrations
{
    [DbContext(typeof(DbContext))]
    partial class DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EF_DDD.ContractingCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContractingCompany");
                });

            modelBuilder.Entity("EF_DDD.Partnership.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContractingCompany");
                });

            modelBuilder.Entity("EF_DDD.Partnership.PartnerEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnName("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ManagerId")
                        .HasColumnName("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartnerId")
                        .HasColumnName("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PartnerId")
                        .HasName("IX_Person_CompanyId1");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("EF_DDD.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerId")
                        .HasColumnName("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("EF_DDD.Contractor", b =>
                {
                    b.HasBaseType("EF_DDD.Person");

                    b.Property<int?>("CompanyId")
                        .HasColumnName("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnName("EmployeeId")
                        .HasColumnType("int");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("Contractor");
                });

            modelBuilder.Entity("EF_DDD.Employee", b =>
                {
                    b.HasBaseType("EF_DDD.Person");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("EF_DDD.Partnership.Partner", b =>
                {
                    b.HasOne("EF_DDD.ContractingCompany", null)
                        .WithOne()
                        .HasForeignKey("EF_DDD.Partnership.Partner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_DDD.Partnership.PartnerEmployee", b =>
                {
                    b.HasOne("EF_DDD.Person", null)
                        .WithOne()
                        .HasForeignKey("EF_DDD.Partnership.PartnerEmployee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_DDD.Partnership.PartnerEmployee", "Manager")
                        .WithMany("Reports")
                        .HasForeignKey("ManagerId");

                    b.HasOne("EF_DDD.Partnership.Partner", "Partner")
                        .WithMany("Employees")
                        .HasForeignKey("PartnerId")
                        .HasConstraintName("FK_Person_ContractingCompany_CompanyId1");
                });

            modelBuilder.Entity("EF_DDD.Person", b =>
                {
                    b.HasOne("EF_DDD.Person", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");
                });

            modelBuilder.Entity("EF_DDD.Contractor", b =>
                {
                    b.HasOne("EF_DDD.ContractingCompany", "Company")
                        .WithMany("Contractors")
                        .HasForeignKey("CompanyId");
                });
#pragma warning restore 612, 618
        }
    }
}
